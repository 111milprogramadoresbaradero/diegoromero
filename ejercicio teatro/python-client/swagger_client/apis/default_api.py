# coding: utf-8

"""
    API Teatro Colon

    API para la reserva de butacas de teatro Colon

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def planta_cancelar(self, fila, columna, **kwargs):
        """
        Cancela la butaca ubicada en columna y fila. Retorna -1 si la butaca no pudo ser cancelada y 0 en caso de que se haya cancelado
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.planta_cancelar(fila, columna, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fila: Numero de la fila a cancelar (required)
        :param str columna: Columna a cancelar (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.planta_cancelar_with_http_info(fila, columna, **kwargs)
        else:
            (data) = self.planta_cancelar_with_http_info(fila, columna, **kwargs)
            return data

    def planta_cancelar_with_http_info(self, fila, columna, **kwargs):
        """
        Cancela la butaca ubicada en columna y fila. Retorna -1 si la butaca no pudo ser cancelada y 0 en caso de que se haya cancelado
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.planta_cancelar_with_http_info(fila, columna, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fila: Numero de la fila a cancelar (required)
        :param str columna: Columna a cancelar (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fila', 'columna']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method planta_cancelar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fila' is set
        if ('fila' not in params) or (params['fila'] is None):
            raise ValueError("Missing the required parameter `fila` when calling `planta_cancelar`")
        # verify the required parameter 'columna' is set
        if ('columna' not in params) or (params['columna'] is None):
            raise ValueError("Missing the required parameter `columna` when calling `planta_cancelar`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fila' in params:
            query_params.append(('fila', params['fila']))
        if 'columna' in params:
            query_params.append(('columna', params['columna']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/planta/cancelar', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='int',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def planta_leer_get(self, **kwargs):
        """
        Retorna el estado de la planta
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.planta_leer_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fila: Numero de la fila a consular
        :param str columna: Columna a consular
        :return: list[Butaca]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.planta_leer_get_with_http_info(**kwargs)
        else:
            (data) = self.planta_leer_get_with_http_info(**kwargs)
            return data

    def planta_leer_get_with_http_info(self, **kwargs):
        """
        Retorna el estado de la planta
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.planta_leer_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fila: Numero de la fila a consular
        :param str columna: Columna a consular
        :return: list[Butaca]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fila', 'columna']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method planta_leer_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fila' in params:
            query_params.append(('fila', params['fila']))
        if 'columna' in params:
            query_params.append(('columna', params['columna']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/planta/leer', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Butaca]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def planta_vender_get(self, fila, columna, **kwargs):
        """
        Vende la butaca ubicada en columna y fila. Retorna -1 si la butaca no pudo ser vendida y 0 en caso de que se haya vendido
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.planta_vender_get(fila, columna, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fila: Numero de la fila a vender (required)
        :param str columna: Columna a vender (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.planta_vender_get_with_http_info(fila, columna, **kwargs)
        else:
            (data) = self.planta_vender_get_with_http_info(fila, columna, **kwargs)
            return data

    def planta_vender_get_with_http_info(self, fila, columna, **kwargs):
        """
        Vende la butaca ubicada en columna y fila. Retorna -1 si la butaca no pudo ser vendida y 0 en caso de que se haya vendido
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.planta_vender_get_with_http_info(fila, columna, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int fila: Numero de la fila a vender (required)
        :param str columna: Columna a vender (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fila', 'columna']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method planta_vender_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fila' is set
        if ('fila' not in params) or (params['fila'] is None):
            raise ValueError("Missing the required parameter `fila` when calling `planta_vender_get`")
        # verify the required parameter 'columna' is set
        if ('columna' not in params) or (params['columna'] is None):
            raise ValueError("Missing the required parameter `columna` when calling `planta_vender_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fila' in params:
            query_params.append(('fila', params['fila']))
        if 'columna' in params:
            query_params.append(('columna', params['columna']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/planta/vender', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='int',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
